# .github/workflows/deploy-microservices.yml
name: Deploy Microservices to Scalingo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job pour provisionner/mettre à jour l'infrastructure Scalingo avec Terraform
  # DISABLED: Infrastructure already created locally due to Scalingo free trial limits
  # terraform_apply:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3

  #     - name: Terraform Init and Apply
  #       run: |
  #         cd sculingo-docker
  #         terraform init
  #         terraform apply -auto-approve -var="scalingo_token=${{ secrets.SCALINGO_API_TOKEN }}"
  #       env:
  #         SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  # Job pour construire et déployer l'API Web
  deploy_web:
    runs-on: ubuntu-latest
    # needs: terraform_apply  # DISABLED: Infrastructure already exists
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Checkout Front
        uses: actions/checkout@v4
        with:
          repository: mahaut1/ReactTestApp
          path: front
      # - name: Use Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 22
      #     registry-url: 'https://registry.npmjs.org'
      # - uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.13'
      - name: Checkout Back node
        uses: actions/checkout@v4
        with:
          repository: mahaut1/CICD_node
          path: api-node

      # - name: Install dependencies
      #   run: |
      #     cd front
      #     npm i
      #     cd server
      #     pip install -r requirements.txt
      #     cd ../../back-node
      #     npm i

      - name: Créer l'archive
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
          mkdir -p monoapp

          # Copy React frontend (excluding the serveur folder)
          cp -r front monoapp/
          # Remove the Python backend from frontend folder to avoid conflicts
          rm -rf monoapp/front/src/serveur 2>/dev/null || true

          # Copy Python backend from React project
          if [ -d "front/src/serveur" ]; then
            cp -r front/src/serveur monoapp/api-python
          fi

          # Copy Node.js backend
          cp -r api-node monoapp/

          # Copy configuration files
          cp sculingo-docker/Procfile monoapp/Procfile
          cp sculingo-docker/.buildpacks monoapp/.buildpacks

          # Create archive
          tar -czvf monoapp.tar.gz --exclude='.git' -C monoapp .
          ls -la monoapp/

      - uses: actions/upload-artifact@v4
        with:
          name: monoapp.tar.gz
          path: monoapp.tar.gz

      - name: Install Scalingo CLI
        uses: scalingo-community/setup-scalingo@v0.1.1
        with:
          region: "osc-fr1"
          api_token: ${{ secrets.SCALINGO_API_TOKEN }} # token API Scalingo ( stocker dans les secrets GitHub)

      - name: Vérifier la version de Scalingo CLI
        run: scalingo --version

      - name: Déploiement sur Scalingo
        run: scalingo --app tima-fullstack-app deploy monoapp.tar.gz
        env:
          SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

      # - name: Login to Scalingo CLI
      #   run: echo "${{ secrets.SCALINGO_API_TOKEN }}" | scalingo login --api-token-stdin

      # - name: Deploy Web API to Scalingo
      #   run: scalingo deploy --app my-microservices-app-tf --type web-api --docker-image your-dockerhub-user/web-api
